/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
    };

    zHomeMod: zHomeMod {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOMEMOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    zHomeLayer: zHomeLayer {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOMELAYER";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    xTab: xTab {
        compatible = "zmk,behavior-mod-morph";
        label = "XTAB";
        bindings = <&kp LEFT_WIN>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT|MOD_RCTL)>;
        keep-mods = <(MOD_LALT)>;
    };

    xShiftonSpace: xShiftonSpace {
        compatible = "zmk,behavior-mod-morph";
        label = "XSHIFTONSPACE";
        bindings = <&kp SPACE>, <&zFast_Mod LEFT_SHIFT SPACE>;

        #binding-cells = <0>;
        mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
        keep-mods = <(MOD_LCTL|MOD_LGUI|MOD_LALT)>;
    };

    xEntertab: xEntertab {
        compatible = "zmk,behavior-mod-morph";
        label = "XENTERTAB";
        bindings = <&zFast_Mod LGUI ENTER>, <&kp TAB>;

        #binding-cells = <0>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };

    ySpacecap: ySpacecap {
        compatible = "zmk,behavior-tap-dance";
        label = "YSPACECAP";
        #binding-cells = <0>;
        bindings = <&kp SPACE>, <&caps_word>;

        tapping-term-ms = <200>;
    };

    yOutput: yOutput {
        compatible = "zmk,behavior-tap-dance";
        label = "YOUTPUT";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&out OUT_BLE>, <&out OUT_USB>;
    };

    zFastLayer: zFastLayer {
        compatible = "zmk,behavior-hold-tap";
        label = "ZFASTLAYER";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    xF4: xF4 {
        compatible = "zmk,behavior-mod-morph";
        label = "XF4";
        bindings = <&zFast_Mod LEFT_SHIFT MINUS>, <&kp F4>;

        #binding-cells = <0>;
        mods = <(MOD_LALT)>;
        keep-mods = <(MOD_LALT)>;
    };

    yPower: yPower {
        compatible = "zmk,behavior-tap-dance";
        label = "YPOWER";
        #binding-cells = <0>;
        bindings = <&ext_power EP_ON>, <&ext_power EP_OFF>;

        tapping-term-ms = <300>;
    };

    yBtClear: yBtClear {
        compatible = "zmk,behavior-tap-dance";
        label = "YBTCLEAR";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings = <&none>, <&none>, <&bt BT_CLR>;
    };

    zFast_Mod: zFast_Mod {
        compatible = "zmk,behavior-hold-tap";
        label = "ZFAST_MOD";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        hold-while-undecided;
    };

    yOff: yOff {
        compatible = "zmk,behavior-tap-dance";
        label = "YOFF";
        #binding-cells = <0>;
        bindings = <&kp LG(L)>, <&soft_off>;

        tapping-term-ms = <300>;
    };

    yBacklight: yBacklight {
        compatible = "zmk,behavior-tap-dance";
        label = "YBACKLIGHT";
        #binding-cells = <0>;
        bindings = <&bl BL_ON>, <&bl BL_OFF>;
    };

    yColour: yColour {
        compatible = "zmk,behavior-tap-dance";
        label = "YCOLOUR";
        #binding-cells = <0>;
        tapping-term-ms = <300>;
        bindings =
            <&rgb_ug RGB_COLOR_HSB(0,0,58)>,
            <&rgb_ug RGB_COLOR_HSB(269,87,84)>,
            <&rgb_ug RGB_COLOR_HSB(173,36,27)>;
    };

    stickylayer: stickylayer {
        compatible = "zmk,behavior-hold-tap";
        label = "STICKYLAYER";
        bindings = <&mo>, <&sl>;

        #binding-cells = <2>;
        tapping-term-ms = <150>;
        hold-while-undecided;
    };

    z2layer: z2layer {
        compatible = "zmk,behavior-hold-tap";
        label = "Z2LAYER";
        bindings = <&mo>, <&to>;

        #binding-cells = <2>;
        hold-while-undecided;
        tapping-term-ms = <200>;
    };

    zSlowLayer: zSlowLayer {
        compatible = "zmk,behavior-hold-tap";
        label = "ZSLOWLAYER";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <180>;
        quick-tap-ms = <150>;
        flavor = "tap-preferred";
    };

    zHome_alt: zHome_alt {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOME_ALT";
        bindings = <&alt_modlayer>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    zHome_ctrl: zHome_ctrl {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOME_CTRL";
        bindings = <&ctrl_modlayer>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    zHome_gui: zHome_gui {
        compatible = "zmk,behavior-hold-tap";
        label = "ZHOME_GUI";
        bindings = <&gui_modlayer>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        quick-tap-ms = <200>;
        flavor = "tap-preferred";
        require-prior-idle-ms = <130>;
    };

    yBootloader: yBootloader {
        compatible = "zmk,behavior-tap-dance";
        label = "YBOOTLOADER";
        #binding-cells = <0>;
        bindings = <&none>, <&none>, <&sys_reset>;
    };

    combos {
        compatible = "zmk,combos";

        paren_open {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <19 20>;
            layers = <6 0 5 4 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        paren_close {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <20 21>;
            layers = <6 0 5 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        quote_all {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <19 21>;
            layers = <6 0 5 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
        };

        brace_left {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <32 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        brace_right {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 33>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <39 40>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <45 43>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        meta {
            bindings = <&kp LEFT_GUI>;
            key-positions = <18 19>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 4 3>;
        };

        meta2 {
            bindings = <&kp LEFT_GUI>;
            key-positions = <17 16>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 4 3>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <33 32 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        percentage {
            bindings = <&kp PERCENT>;
            key-positions = <45 44 43>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <33 31>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <26 28>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <14 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <38 40>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        divide {
            bindings = <&kp SLASH>;
            key-positions = <38 39>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <15 16>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <15 14>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        bracket_close {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <27 28>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        bracket_open {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 27>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <33 34>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <13 14>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <25 26>;
            timeout-ms = <30>;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 3>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <31 30>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 4>;
        };

        shift2 {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <28 29>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 4>;
        };

        alt2 {
            bindings = <&kp LEFT_ALT>;
            key-positions = <43 42>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 4>;
        };

        alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <40 41>;
            timeout-ms = <30>;
            slow-release;
            require-prior-idle-ms = <5>;
            layers = <6 0 5 4>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "NEW_MACRO";
        };

        alt_modlayer: alt_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 12>,
                <&macro_press>,
                <&kp LALT>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LALT>,
                <&macro_release>,
                <&mo 12>;
        };

        ctrl_modlayer: ctrl_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 11>,
                <&macro_press>,
                <&kp LEFT_CONTROL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_CONTROL>,
                <&macro_release>,
                <&mo 11>;

            label = "CTRL_MODLAYER";
        };

        gui_modlayer: gui_modlayer {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 14>,
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_GUI>,
                <&macro_release>,
                <&mo 14>;

            label = "GUI_MODLAYER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------
            // |  ESC  |  1*  |  2*  |  3*  |     4*    |   5*  |   6*   |    7*    |  8*  |  9*  |   0*  | BSPC  |
            // |  TAB  |  Q   |  W   |  E   |     R     |   T   |   Y    |    U     |  I   |  O   |   P   |   '*  |
            // |   `*  |  A   |  S   |  D   |     F     |   G   |   H    |    J     |  K   |  L   |   ;*  | ENTER |
            // | SHIFT |  Z   |  X   |  C   |     V     |   B   |   N    |    M     |  ,*  |  .*  | UARW  |  /*   |
            // | LCTL  | LGUI | LALT | LOWR | 2uSpace(a)|4uSpace|  N/A** |2uSpace(b)| RAIS | LARW | DARW  | RARW  |

            bindings = <
&kp ESC                 &kp N1                    &kp N2           &kp N3             &kp N4                &kp N5     &kp N6                       &kp N7                       &kp N8                &kp N9           &kp N0                    &kp BACKSPACE
&kp TAB                 &zHome_alt 0 Q            &zHome_ctrl 0 W  &zHome_gui 0 F     &zHomeLayer 8 P       &kp G      &kp J                        &kp L                        &kp U                 &kp Y            &zHomeLayer 9 SEMICOLON   &kp BACKSLASH
&zFast_Mod LCTRL MINUS  &zHomeMod LEFT_CONTROL A  &zHomeLayer 5 R  &zHomeLayer 4 S    &zHomeMod LEFT_GUI T  &kp D      &kp H                        &zHomeMod LEFT_GUI N         &zHomeLayer 4 E       &zHomeLayer 5 I  &zHomeMod LEFT_CONTROL O  &zHomeLayer 8 SQT
&kp LSHFT               &zHomeLayer 6 Z           &kp X            &kp C              &kp V                 &kp B      &kp K                        &kp M                        &kp COMMA             &kp DOT          &zHomeLayer 6 SLASH       &kp GRAVE
&to 3                   &kp LEFT_GUI              &kp LEFT_ALT     &zFastLayer 5 F13  &kp SPACE             &kp SPACE  &zFast_Mod LEFT_SHIFT ENTER  &zFast_Mod LEFT_SHIFT ENTER  &zFastLayer 4 ESCAPE  &none            &none                     &zFastLayer 7 PLUS
            >;
        };

        game {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3  &kp N4     &kp N5     &kp N6   &kp N7   &kp N8     &kp N9   &kp N0    &kp BSPC
&kp TAB    &kp Q   &kp W   &kp F   &kp P      &kp G      &kp J    &kp L    &kp U      &kp Y    &kp SEMI  &kp BSLH
&kp LCTRL  &kp A   &kp R   &kp S   &kp T      &kp D      &kp H    &kp N    &kp E      &kp I    &kp O     &kp SQT
&kp LSHFT  &kp Z   &kp X   &kp C   &kp V      &kp B      &kp K    &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp GRAVE
&none      &none   &none   &none   &kp SPACE  &kp SPACE  &kp RET  &kp RET  &none      &to 0    &none     &zFastLayer 7 PLUS
            >;
        };

        qwerty {
            bindings = <
&kp ESC    &kp N1        &kp N2        &kp N3             &kp N4     &kp N5     &kp N6   &kp N7   &kp N8                &kp N9   &kp N0    &kp BSPC
&kp TAB    &kp Q         &kp W         &kp E              &kp R      &kp T      &kp Y    &kp U    &kp I                 &kp O    &kp P     &kp BSLH
&kp LCTRL  &kp A         &kp S         &kp D              &kp F      &kp G      &kp H    &kp J    &kp K                 &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z         &kp X         &kp C              &kp V      &kp B      &kp N    &kp M    &kp COMMA             &kp DOT  &kp FSLH  &kp GRAVE
&none      &kp LEFT_GUI  &kp LEFT_ALT  &zFastLayer 5 F13  &kp SPACE  &kp SPACE  &kp RET  &kp RET  &zFastLayer 4 ESCAPE  &none    &none     &zFastLayer 7 PLUS
            >;
        };

        temp_cole {
            bindings = <
&kp ESC    &kp N1        &kp N2        &kp N3             &kp N4     &kp N5     &kp N6                       &kp N7                       &kp N8                &kp N9   &kp N0    &kp DELETE
&kp TAB    &kp Q         &kp W         &kp F              &kp P      &kp G      &kp J                        &kp L                        &kp U                 &kp Y    &kp SEMI  &kp BACKSPACE
&kp LCTRL  &kp A         &kp R         &kp S              &kp T      &kp D      &kp H                        &kp N                        &kp E                 &kp I    &kp O     &kp SQT
&kp LSHFT  &kp Z         &kp X         &kp C              &kp V      &kp B      &kp K                        &kp M                        &kp COMMA             &kp DOT  &kp FSLH  &kp GRAVE
&none      &kp LEFT_GUI  &kp LEFT_ALT  &zFastLayer 5 F13  &kp SPACE  &kp SPACE  &zFast_Mod LEFT_SHIFT ENTER  &zFast_Mod LEFT_SHIFT ENTER  &zFastLayer 4 ESCAPE  &none    &to 0     &zFastLayer 7 PLUS
            >;
        };

        sym {
            bindings = <
&kp ESC            &kp N1       &kp N2          &kp N3               &kp N4                &kp N5       &kp N6           &kp N7                &kp N8                 &kp N9      &kp N0         &kp BSPC
&kp TAB            &kp PERCENT  &kp MINUS       &kp LESS_THAN        &kp GREATER_THAN      &kp PLUS     &kp PIPE         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp COLON   &kp SEMICOLON  &none
&kp DOUBLE_QUOTES  &kp LCTRL    &kp DOLLAR      &kp LEFT_BRACKET     &kp RIGHT_BRACKET     &kp AT_SIGN  &kp EXCLAMATION  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EQUAL   &kp ASTERISK   &kp SQT
&none              &kp HASH     &kp UNDERSCORE  &kp AMPERSAND        &kp NON_US_BACKSLASH  &kp GRAVE    &kp TILDE        &kp SLASH             &kp COMMA              &kp PERIOD  &kp QUESTION   &none
&none              &none        &none           &zFastLayer 5 SPACE  &key_repeat           &key_repeat  &kp ENTER        &kp ENTER             &to 0                  &none       &none          &zFastLayer 7 PLUS
            >;
        };

        num {
            bindings = <
&none      &none      &none   &none   &none                &none                &none         &none     &none                        &none         &none      &none
&kp TAB    &kp COMMA  &kp N1  &kp N2  &kp N3               &kp LC(X)            &kp ASTERISK  &kp HOME  &kp PG_DN                    &kp PG_UP     &kp END    &none
&kp LSHFT  &kp N0     &kp N4  &kp N5  &kp N6               &kp LC(C)            &kp PLUS      &kp LEFT  &kp DOWN                     &kp UP        &kp RIGHT  &kp FSLH
&kp LALT   &kp DOT    &kp N7  &kp N8  &kp N9               &kp LC(V)            &kp MINUS     &none     &none                        &none         &none      &none
&none      &none      &none   &to 0   &zFastLayer 9 ENTER  &zFastLayer 9 ENTER  &to 0         &to 0     &zFast_Mod LEFT_SHIFT SPACE  &kp LEFT_GUI  &none      &zFastLayer 7 PLUS
            >;
        };

        repeat {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3  &kp N4     &kp N5     &kp N6   &kp N7   &kp N8     &kp N9   &kp N0    &kp BSPC
&kp TAB    &kp Q   &kp W   &kp F   &kp P      &kp G      &kp J    &kp L    &kp U      &kp Y    &kp SEMI  &kp BSLH
&kp LCTRL  &kp A   &kp R   &kp S   &kp T      &kp D      &kp H    &kp N    &kp E      &kp I    &kp O     &kp SQT
&kp LSHFT  &kp Z   &kp X   &kp C   &kp V      &kp B      &kp K    &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp GRAVE
&none      &none   &none   &none   &kp SPACE  &kp SPACE  &kp RET  &kp RET  &none      &to 0    &none     &zFastLayer 7 PLUS
            >;
        };

        fn {
            bindings = <
&none         &none  &none  &none   &none   &none         &none  &none  &none        &none       &none   &yBtClear
&bt BT_SEL 0  &none  &to 1  &to 2   &to 3   &bt BT_SEL 3  &none  &none  &none        &none       &none   &none
&bt BT_SEL 1  &to 0  &to 4  &to 5   &to 6   &bt BT_SEL 4  &none  &none  &none        &none       &none   &none
&bt BT_SEL 2  &none  &to 8  &to 10  &to 15  &yOutput      &none  &none  &none        &none       &none   &to 15
&none         &none  &none  &none   &none   &none         &none  &none  &bootloader  &sys_reset  &reset  &zFastLayer 7 PLUS
            >;
        };

        f1 {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none     &none     &none   &none
&none  &none  &none  &none  &none  &to 0  &none  &none  &none     &none     &none   &none
&none  &none  &none  &none  &none  &none  &none  &none  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT
&none  &none  &none  &none  &none  &none  &none  &none  &none     &none     &none   &none
&none  &none  &none  &none  &none  &none  &none  &none  &none     &none     &none   &zFastLayer 7 PLUS
            >;
        };

        ql {
            bindings = <
&none  &none  &none  &none  &none        &none        &none       &none          &none              &none  &none  &none
&none  &none  &none  &none  &none        &none        &none       &kp DELETE     &kp LC(DELETE)     &none  &none  &none
&none  &none  &none  &none  &kp F13      &none        &none       &kp BACKSPACE  &kp LC(BACKSPACE)  &none  &none  &none
&none  &none  &none  &none  &none        &none        &none       &kp LC(S)      &kp LC(LS(S))      &none  &none  &none
&none  &none  &none  &none  &key_repeat  &key_repeat  &caps_word  &caps_word     &none              &none  &none  &zFastLayer 7 PLUS
            >;
        };

        mouse {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &zFastLayer 7 PLUS
            >;
        };

        tControl {
            bindings = <
&none        &none      &none  &none        &none      &none    &none    &none     &none      &none      &none    &none
&kp LS(ESC)  &kp LSHFT  &none  &kp Z        &kp Y      &kp Q    &kp T    &kp HOME  &kp PG_UP  &kp PG_DN  &kp END  &none
&kp LA(DEL)  &kp A      &none  &kp LS(TAB)  &kp TAB    &kp W    &none    &kp BSPC  &kp LEFT   &kp DOWN   &kp UP   &kp RIGHT
&none        &none      &none  &kp P        &kp LS(N)  &kp N    &none    &kp C     &kp V      &kp X      &kp A    &none
&none        &none      &none  &kp SPACE    &kp ESC    &kp ESC  &kp RET  &kp RET   &none      &none      &none    &zFastLayer 7 PLUS
            >;
        };

        tAlt {
            bindings = <
&none  &none  &none      &none        &none      &none      &none      &none      &none      &none      &none      &none
&none  &none  &kp LCTRL  &none        &kp D      &kp F4     &kp P      &kp HOME   &kp PG_UP  &kp PG_DN  &kp END    &none
&none  &none  &kp LSHFT  &kp LS(TAB)  &kp TAB    &none      &none      &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &none
&none  &none  &none      &none        &none      &none      &none      &none      &none      &none      &kp A      &none
&none  &none  &none      &kp ESC      &kp ENTER  &kp ENTER  &kp SPACE  &kp SPACE  &none      &none      &none      &zFastLayer 7 PLUS
            >;
        };

        entry {
            bindings = <
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &none  &zFastLayer 7 PLUS
            >;
        };

        tGui {
            bindings = <
&none        &none        &none      &none  &none    &none    &none      &none      &none      &none      &none       &none
&kp ESC      &kp LCTRL    &kp LSHFT  &none  &kp E    &kp Q    &none      &kp HOME   &kp PG_UP  &kp PG_DN  &kp END     &kp PRINTSCREEN
&kp LA(DOT)  &kp LS(TAB)  &kp LS(S)  &none  &kp TAB  &kp W    &kp PLUS   &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT   &kp PAUSE_BREAK
&kp X        &kp P        &kp LC(D)  &kp M  &kp D    &kp L    &kp MINUS  &kp R      &kp V      &none      &kp LC(F4)  &none
&none        &none        &none      &none  &kp RET  &kp RET  &kp SPACE  &kp SPACE  &none      &none      &none       &zFastLayer 7 PLUS
            >;
        };

        media {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &zFastLayer 7 PLUS
            >;
        };
    };
};
